node -v
	-> some version -> v14.15.0
	if no
		-> download the nodeJs and install
	npm install -g npm (node package manager)
	npm install -g @angular/cli@latest

	ng --version

		Angular CLI: 13.1.2
		Node: 14.15.0
		Package Manager: npm 8.5.5

		Package                      Version
		------------------------------------------------------
		@angular-devkit/architect    0.1301.2 (cli-only)
		@angular-devkit/core         13.1.2 (cli-only)
		@angular-devkit/schematics   13.1.2 (cli-only)
		@schematics/angular          13.1.2 (cli-only)

	Visual Studio Code
	https://code.visualstudio.com/

	mkdir AngularApps
	cd AngularApps

	Create first angular project
	------------------------------

	ng new angular-app
		-> It will ask for routing -> y
		-> what css you want -> css (default - Press Enter)

	cd angular-app
	open tsConfig.json and only modify strict -> false
		{
			"compilerOptions": {
					"strict": false
			}
		}
		npm start -> Bring up the application
		Open any browser :- http://localhost:4200/ -> You will see a angular page.

		Open app.component.html -> remove everything and paste -> <h1> Welcome to Angular </h1>
		Open any browser :- http://localhost:4200/ -> You will see  -> Welcome to Angular

	Adding bootstrap to application
		->	npm install bootstrap
		-> 	npm install jquery
		-> 	add the line to styles.css => @import "~bootstrap/dist/css/bootstrap.css"

	add the new nested component
		ng generate component components/home/home -> generate a new component
		Creates 4 files..
			home.component.ts 			-> Business Logic
			home.component.html 		-> Template Code
			home.component.css 			-> Styling Changes
			home.component.spec.ts 	-> Unit testing File


Data Interactions.
--------------------
4 Types Data Bindings

1. One Way Binding
		Data flows from Component to Template(HTML)
			1. Interpolation
			2. Property Binding
				a. Class Binding
				b. Style Binding
				c. Attribute binding
			3. Event Binding
2. Two Way Binding
----------------------------------------------------------------------------------
One Way Binding :- Interpolation
		Data flows from Component to Template(HTML)
		Component -> title = 'Angular'
		Template -> Welcome to {{title}} = o/p =>  Welcome to Angular

----------------------------------------------------------------------------------
One Way Binding :- Property Binding
		Data flows from Component to Template(HTML)
		Component -> isDisabled = false
		Template -> [disabled]="isDisabled"
----------------------------------------------------------------------------------
One Way Binding :- Event Binding
		Data flows from Template(HTML) to Component
		Template -> (click) = enableUsername()
		Component -> enableUsername() -> update isDisabled's value.
----------------------------------------------------------------------------------
Two Way Binding :- Property Binding + Event Binding
	-> [] + () => [(ngModel)]

	To make this work
	-> open app.module.ts and make 2 changes
		(1) import { FormsModule } from '@angular/forms';
		@NgModule({
		  declarations: [
			....
		  ],
		  imports: [
			(2) FormsModule
		  ],
		})
----------------------------------------------------------------------------------
Class Binding
	Only One Class
		HTML -> [class]="onlyOneClass"
		Component  ->public onlyOneClass: string = 'oneBoldClass';
		CSS  ->.oneBoldClass{font-weight: bold}

	Only Multiple  Classes
		HTML -> [class]="multipleClasses"
		Component  ->public   multipleClasses = ['mulitBolder', 'multiFonter', 'multiItalic']
		CSS  ->.mulitBolder{ font-weight: bold; }  .multiFonter{ font-size: 30px; }  .multiItalic{ font-style: italic; }

	Applying class based on variable
		HTML ->[class.blueColor]="applyBlueColor"
		Component  ->public  applyBlueColor: boolean = false;
		CSS  ->.blueColor{color: blue;}
----------------------------------------------------------------------------------
Style Binding
	HTML -> [style]="customStyle"
	Component  ->   public customStyle:string = 'color:blue; font-size: 30px; text-decoration:line-through';
----------------------------------------------------------------------------------
Component to Component Interaction
Case 1:- Parent to Child
--------------------------
	Parent Component :-
		Component  ->   public inputMessage:string = 'I am from parent';
		HTML -> [childMessage]="inputMessage"

	Child 	 :-
		Component  ->   @Input() childMessage: string = '';
		HTML -> <p>{{ childMessage }}</p>

	Flow
		-> Parent's Component(inputMessage)
		-> Parent's Template([childMessage]="inputMessage")
		-> Child's Component(@Input() childMessage)
		-> Child's Template({{ childMessage }})


Angular Directives

Normal attributes what we have
 -> class, id, disabled, href, action.... HTML element attribiutes
 -> (click), ngModel, ngFor -> Angular Compiler [class], [style], [disabled] -> Only understood by Angular Compiler

Structural Directives
Its used to add/remove DOM Elements in the current HTML Document.

ngIf
ngFor
ngSwitch
ngCase
....

CMD:- ng g c components/directive-usage/structural/

*ngIf 
	-> HTML -> *ngIf="people.length > 0"
	-> TS -> people: Person[] = [];

	HTML 
		*ngIf="isUserLoggedIn; else showLoggedOutMessage"
		ng-template #showLoggedOutMessage
	TS	
		public isUserLoggedIn = false;
  		public showLoggedOutMessage = true;
*ngFor
	HTML -> *ngFor="let person of people; trackBy: trackByPerson; let i = index"
	TS -> people: Person[] = [];

ngSwitch
	[ngSwitch]="loginName"
	*ngSwitchCase="'user'"
	*ngSwitchDefault

Attribute Directives
	ngStyle
	ngClass
	ngModel

CMD:- ng g c components/directive-usage/attribute

ngStyle
	[ngStyle]="{'font-size': '25px', color: getColor(name)}"

ngClass	
	HTML  [ngClass]="{ highlight: odd }" 
	CSS  .highlight : {color: red}

Custom Directives
	CMD:- ng generate directive customstyle

	selector -> appCustomStyle
	constructor(el: ElementRef) {
		el.nativeElement.style.fontSize = '50px';
		el.nativeElement.style.backgroundColor = 'gray';
	}

Pipes :-
	date
	currency
	slice
	json

	CMD:- ng g c components/pipes/built-in-pipes
custom pipe
	CMD:- ng g pipe digitcount 


Agenda - 15-05-2022




